import os, json
from pprint import pprint
import utils

_answer = b'F\x00\x8e\x00\xb3\x00\xe7\x00\xf2\x00\x05\x01\x1c\x01E\x01f\x01\x8f\x01\xaa\x01\xec\x01\xf7\x01\x0c\x027\x02`\x02k\x02\xa3\x02\xa8\x02\xc7\x02\xd4\x02\xe3\x02\xfc\x02\x13\x03(\x039\x03Z\x03\x97\x03\xb6\x03\xe6\x03\x03\x04"\x048\x04U\x04\x97\x04\xac\x04\xc9\x04\xe6\x04\r\x05^\x05s\x05\x8a\x05\xa3\x05\xba\x05\x05\x06\x14\x06=\x06X\x06w\x06\x98\x06\xcc\x06\xe7\x06\x06\x07\x15\x07*\x07W\x07x\x07\x89\x07\xc6\x07\x02\x084\x08K\x08f\x08q\x08\xa3\x08\xb3\x08\xbe\x08\xe8\x08\x05\t\x12\t7\t\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xcc\x83o\x83X\x83P\x83b\x83e\x83B\x83\x93\x83O\x00\x83A\x81[\x83`\x83t\x83\x89\x83C\x83f\x83B\x83X\x83y\x83\x93\x83T\x81[\x82\xf0\x8eg\x82\xc1\x82\xc4\n\x83o\x83X\x83P\x83b\x83e\x83B\x83\x93\x83O\x00\x87@\x91\xdc\x82\xf0\x8aJ\x82\xad\x00\x87A\x83z\x83b\x83p\x81[\x82\xc9\x93\xfc\x82\xea\x82\xe9\x00\x87B\x83z\x83b\x83p\x81[\x82\xc9\x82\xd3\x82\xbd\x82\xf0\x82\xb7\x82\xe9\x00\x87C\x8ec\x82\xc1\x82\xbd\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xf0\x97\xe2\x93\x80\x8c\xc9\x82\xc9\x96\xdf\x82\xb7\x00\x87D\x83o\x83X\x83P\x83b\x83g\x82\xc9\x93\xfc\x82\xea\x82\xe9\x97\xca\x82\xf0\x90\xdd\x92\xe8\x82\xb7\x82\xe9\x00\x87E\x83A\x83b\x83p\x81[\x83K\x83C\x83h\x82\xc9\x83o\x83X\x83P\x83b\x83g\x82\xf0\x83Z\x83b\x83g\x82\xb7\x82\xe9\x00\x8e\xe8\x8d\xec\x8b\xc6\x82\xc5\x82\xcc\x83o\x83X\x83P\x83b\x83e\x83B\x83\x93\x83O\x00\x87@\x83|\x83e\x83g\x83v\x83\x8c\x83b\x83v\x83e\x81[\x83u\x83\x8b\x82\xc9\x90\xea\x97p\x83g\x83\x8c\x81[\x82\xf0\n\x92u\x82\xab\x83o\x83X\x83P\x83b\x83g\x82\xf0\x82S\x8c\xc2\x95\xc0\x82\xd7\x82\xe9\x00\x87A\x91\xdc\x82\xf0\x8aJ\x82\xad\x00\x87B\x83o\x83X\x83P\x83b\x83g\x82\xc9\x93\xfc\x82\xea\x82\xe9\x00\x87C\x83|\x83e\x83g\x82\xcc\x93\xfc\x82\xc1\x82\xbd\x83o\x83X\x83P\x83b\x83g\x82\xf0\x83\x89\x83b\x83N\x82\xc9\x93\xfc\x82\xea\x82\xe9\x00\x87D\x8ec\x82\xc1\x82\xbd\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xf0\x97\xe2\x93\x80\x8c\xc9\x82\xc9\x96\xdf\x82\xb7\x00\x83N\x83I\x83\x8a\x83e\x83B\x00\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xc9\x91\xce\x82\xb5\x82\xc4\x82\xa8\x8bq\x97l\x82\xaa\n\x8a\xfa\x91\xd2\x82\xb7\x82\xe9\x82\xb1\x82\xc6\x82\xcd\x89\xbd\x82\xa9\x81H\x00\x8f\x80\x94\xf5\x00\x83t\x83\x89\x83C\x83\x84\x81[\x82\xcc\x89\xb7\x93x\x82\xf0\x83`\x83F\x83b\x83N\x82\xb7\x82\xe9\x00\x83|\x83e\x83g\x82\xcc\x8e\xed\x97\xde\x00\x8e\xe8\x82\xcd\x90\xf4\x82\xc1\x82\xbd\x82\xa9\x81H\x00\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xcc\x92\xb2\x97\x9d\x00\x87@\x83o\x83X\x83P\x83b\x83g\x82\xf0\x8e\xe6\x82\xe8\x8fo\x82\xb7\x00\x87A\x83I\x83C\x83\x8b\x82\xcc\x92\x86\x82\xc9\x93\xfc\x82\xea\x82\xe9\x00\x87B\x83^\x83C\x83}\x81[\x82\xf0\x89\x9f\x82\xb7\x00\x87C\x83^\x83C\x83}\x81[\x82\xaa\x82\xc8\x82\xc1\x82\xbd\x82\xe7\x83|\x83e\x83g\x82\xf0\x90U\x82\xe9\x00\x87D\x83^\x83C\x83}\x81[\x82\xaa\x96\xc2\x82\xc1\x82\xbd\x82\xe7\x8e\xe6\x82\xe8\x8fo\x82\xb5\x82\xc4\n\x83I\x83C\x83\x8b\x82\xf0\x90\xd8\x82\xe8 HT\x83^\x83C\x83}\x81[\x82\xf0\x89\x9f\x82\xb7\x00\x87E\x83|\x83e\x83g\x82\xf0\x83o\x83M\x83\x93\x83O\x83g\x83\x8c\x81[\x82\xc9\x88\xda\x82\xb7\x00\x87F\x83o\x83X\x83P\x83b\x83g\x82\xf0\x83o\x83b\x83g\x82\xcc\x8f\xe3\x82\xc9\x96\xdf\x82\xb5\x82\xc4\n\x83I\x83C\x83\x8b\x82\xf0\x97\x8e\x82\xc6\x82\xb7\x00\x87G\x82\xb7\x82\xae\x82\xc9\x89\x96\x82\xf0\x90U\x82\xe8\x81A\x82\xa9\x82\xab\x8d\xac\x82\xba\x82\xe9\x00\x87H\x83o\x83b\x83O\x82\xdc\x82\xbd\x82\xcd\x83{\x83b\x83N\x83X\x82\xc9\x93\xfc\x82\xea\x82\xe9\x00\x87I7\x95\xaa\x88\xc8\x93\xe0\x82\xc9\x83T\x81[\x83u\x82\xb7\x82\xe9\x00\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xcc\x83o\x83M\x83\x93\x83O\x00\x87@\x83o\x83M\x83\x93\x83O\x83X\x83N\x81[\x83v\x82\xc6\x83t\x83\x89\x83C\x83o\x83b\x83O\n\x82\xdc\x82\xbd\x82\xcd\x83t\x83\x89\x83C\x83{\x83b\x83N\x83X\x82\xf0\x8e\x9d\x82\xbf\x8f\xe3\x82\xb0\x82\xe9\x00\x87A\x83X\x83N\x81[\x83v\x82\xf0\x91}\x93\xfc\x82\xb7\x82\xe9\x00\x87B\x83X\x83N\x81[\x83v\x82\xc6\x83p\x83b\x83P\x81[\x83W\x82\xf0\x8e\x9d\x82\xc2\x00\x87C\x93\xfc\x82\xea\x82\xc8\x82\xaa\x82\xe7\x83X\x83N\x81[\x83v\x82\xf0\x8cX\x82\xaf\x82\xe9\x00\x87D\x83o\x83b\x83O\x82\xdc\x82\xbd\x82\xcd\x83{\x83b\x83N\x83X\x82\xf0\x83\x89\x83b\x83N\x82\xc9\x82\xcc\x82\xb9\x82\xe9\x00\x83\x8d\x81[\x83Z\x81[\x83\x8b\x83X\x8e\x9e\x81A\x83n\x83C\x83Z\x81[\x83\x8b\x83X\x8e\x9e\x82\xcc\n\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xcc\x92\xb2\x97\x9d\n\x81@\x83\x8d\x81[\x83{\x83\x8a\x83\x85\x81[\x83\x80\x8e\x9e\x8a\xd4\x91\xd1\x00\x83\x8d\x81[\x83{\x83\x8a\x83\x85\x81[\x83\x80\x8e\x9e\x8a\xd4\x91\xd1\x00\x87@\x83o\x83X\x83P\x83b\x83g\x87@\x82\xf0\x93\xfc\x82\xea\x82\xe9\x00\x87A\x83o\x83X\x83P\x83b\x83g\x87@\x82\xf0\x88\xf8\x82\xab\x8fo\x82\xb7\x00\x87B\x83o\x83X\x83P\x83b\x83g\x87A\x82\xf0\x93\xfc\x82\xea\x82\xe9\x00\x83\x8d\x81[\x83Z\x81[\x83\x8b\x83X\x8e\x9e\x81A\x83n\x83C\x83Z\x81[\x83\x8b\x83X\x8e\x9e\x82\xcc\n\x83}\x83b\x83N\x83t\x83\x89\x83C\x83|\x83e\x83g\x82\xcc\x92\xb2\x97\x9d\n\x81@\x83s\x81[\x83N\x82\xcc\x8e\x9e\x8a\xd4\x91\xd1\x00\x83s\x81[\x83N\x82\xcc\x8e\x9e\x8a\xd4\x91\xd1\x00\x87@\x83o\x83X\x83P\x83b\x83g\x87@\x82\xf0\x93\xfc\x82\xea\x81A30\x95b\x8c\xe3\x82\xc9\x87A\x82\xf0\x93\xfc\x82\xea\x82\xe9\x00\x87A\x83o\x83X\x83P\x83b\x83g\x87B\x82\xc6\x87C\x82\xf0\x93\xfc\x82\xea\x82\xe9\x00\x87B\x83o\x83X\x83P\x83b\x83g\x87@\x82\xa9\x82\xe7\x8f\x87\x94\xd4\x88\xf8\x82\xab\x8fo\x82\xb7\x00\x83n\x83b\x83V\x83\x85\x83|\x83e\x83g\x82\xcc\x92\xb2\x97\x9d\x81@\x83N\x83H\x83\x8a\x83e\x83B\x00\x83n\x83b\x83V\x83\x85\x83|\x83e\x83g\x82\xc9\x91\xce\x82\xb5\x82\xc4\x82\xa8\x8bq\x97l\x82\xaa\n\x8a\xfa\x91\xd2\x82\xb7\x82\xe9\x82\xb1\x82\xc6\x82\xcd\x89\xbd\x82\xa9\x81H\x00\x83n\x83b\x83V\x83\x85\x83|\x83e\x83g\x82\xcc\x92\xb2\x97\x9d\x81@\x8f\x80\x94\xf5\x00\x83t\x83\x89\x83C\x83\x84\x81[\x82\xcc\x89\xb7\x93x\x82\xf0\x83`\x83F\x83b\x83N\x82\xb7\x82\xe9\x00\x8e\xe8\x82\xcd\x90\xf4\x82\xc1\x82\xbd\x82\xa9\x81H\x00\x83n\x83b\x83V\x83\x85\x83|\x83e\x83g\x82\xcc\x92\xb2\x97\x9d\x00\x87@\x83n\x83b\x83V\x83\x85\x83|\x83e\x83g\x82\xf0\x83o\x83X\x83P\x83b\x83g\x82\xc9\n1\x96\x87\x82\xb8\x82\xc2\x93\xfc\x82\xea\x82\xe9\x00\x87A\x83o\x83X\x83P\x83b\x83g\x82\xf0\x83I\x83C\x83\x8b\x82\xcc\x92\x86\x82\xc9\x93\xfc\x82\xea\x82\xe9\x00\x87B\x83^\x83C\x83}\x81[\x82\xf0\x89\x9f\x82\xb7\x00\x87C\x83^\x83C\x83}\x81[\x82\xaa\x96\xc2\x82\xc1\x82\xbd\x82\xe7\x8e\xe6\x82\xe8\x8fo\x82\xb5\x82\xc4\x83I\x83C\x83\x8b\x82\xf0\n\x90\xd8\x82\xe8 HT\x83^\x83C\x83}\x81[\x82\xf0\x89\x9f\x82\xb7\x00\x87D\x83o\x83M\x83\x93\x83O\x83g\x83\x8c\x81[\x82\xc9\x88\xda\x82\xb7\x81B\x8b\xf3\x82\xcc\x83o\x83X\x83P\x83b\x83g\x82\xcd\n\x83o\x83b\x83g\x82\xcc\x8f\xe3\x82\xc9\x82\xa9\x82\xaf\x82\xe9\x00\x87E\x95K\x97v\x82\xc9\x89\x9e\x82\xb6\x82\xc4\x83n\x83b\x83V\x83\x85\x83|\x83e\x83g\x82\xf0\n\x83p\x83b\x83P\x81[\x83W\x83\x93\x83O\x82\xb7\x82\xe9\x00\x87F10\x95\xaa\x88\xc8\x93\xe0\x82\xc9\x83T\x81[\x83u\x82\xb7\x82\xe9\x00\x83X\x83e\x81[\x83V\x83\x87\x83\x93\x82\xcc\x83\x81\x83\x93\x83e\x83i\x83\x93\x83X\x00\x83Z\x81[\x83t\x83e\x83B\x00\x83X\x83e\x81[\x83V\x83\x87\x83\x93\x82\xcc\x83\x81\x83\x93\x83e\x83i\x83\x93\x83X\n\x81@\x83I\x83C\x83\x8b\x82\xcc\x83\x81\x83\x93\x83e\x83i\x83\x93\x83X\x00\x83I\x83C\x83\x8b\x82\xcc6\x82\xc2\x82\xcc\x93G\x00\x83I\x83C\x83\x8b\x83P\x83A\x00\x83X\x83e\x81[\x83V\x83\x87\x83\x93\x82\xcc\x83\x81\x83\x93\x83e\x83i\x83\x93\x83X\n\x81@\x83N\x83\x8c\x83\x93\x83\x8a\x83l\x83X\x00\x83t\x83\x89\x83C\x83X\x83e\x81[\x83V\x83\x87\x83\x93\x82\xf0\x90\xb4\x91|\x82\xb7\x82\xe9\x00\x8f\xb0\x82\xf0\x90\xb4\x91|\x82\xb7\x82\xe9\x00\x83X\x83e\x81[\x83V\x83\x87\x83\x93\x82\xcc\x83\x81\x83\x93\x83e\x83i\x83\x93\x83X\x81@\x83X\x83g\x83b\x83N\x00\x8e\x91\x8d\xde\x82\xcc\x83X\x83g\x83b\x83N\x83\x8c\x83x\x83\x8b\x82\xf0\x83`\x83F\x83b\x83N\x82\xb7\x82\xe9\x00'

def _two_bytes(num):
	return num.to_bytes(2, byteorder='little')

def _byte_indices(strings):
	indices = []

	num_strings = len(strings)
	# add two to account for the count at the beginning
	# and twice the count to account for the indices
	string_index = (num_strings * 2) + 2 
	for s in strings:
		indices.append(_two_bytes(string_index))
		string_index += len(s)
		
	return indices

def buildFile(strings):
	strings = [s.encode(encoding='shift-jisx0213') for s in strings]
	# b'\x00' is the terminator for these strings
	strings = [s + b'\x00' for s in strings]

	# File starts with count of strings
	contents = _two_bytes(len(strings))
	# Then the start index of each string
	contents += b''.join(_byte_indices(strings))
	# Then the strings themselves
	contents += b''.join(strings)

	return contents
	
if __name__ == "__main__":
	data = utils.getData('D:\ecdp\eCDP-translation\data\data\soc_tp00.json')
	result = buildFile(s['original_japanese'] for s in data['strings'])

	print(result==_answer)
